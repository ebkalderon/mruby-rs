/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
pub const MRB_INT_BIT: u32 = 64;
pub const MRB_PRIo: &'static [u8; 4usize] = b"llo\0";
pub const MRB_PRId: &'static [u8; 4usize] = b"lld\0";
pub const MRB_PRIx: &'static [u8; 4usize] = b"llx\0";
pub const MRB_FLAG_IS_FROZEN: u32 = 262144;
pub const MRB_FIXNUM_SHIFT: u32 = 0;
pub const MRB_EACH_OBJ_OK: u32 = 0;
pub const MRB_EACH_OBJ_BREAK: u32 = 1;
pub const MRB_GC_ARENA_SIZE: u32 = 100;
pub const MRUBY_RUBY_VERSION: &'static [u8; 4usize] = b"1.9\0";
pub const MRUBY_RUBY_ENGINE: &'static [u8; 6usize] = b"mruby\0";
pub const MRUBY_RELEASE_MAJOR: u32 = 1;
pub const MRUBY_RELEASE_MINOR: u32 = 4;
pub const MRUBY_RELEASE_TEENY: u32 = 1;
pub const MRUBY_RELEASE_NO: u32 = 10401;
pub const MRUBY_RELEASE_YEAR: u32 = 2018;
pub const MRUBY_RELEASE_MONTH: u32 = 4;
pub const MRUBY_RELEASE_DAY: u32 = 27;
pub const MRUBY_BIRTH_YEAR: u32 = 2010;
pub const MRUBY_AUTHOR: &'static [u8; 17usize] = b"mruby developers\0";
pub const MRB_FIXED_STATE_ATEXIT_STACK_SIZE: u32 = 5;
pub const MRB_METHOD_CACHE_SIZE: u32 = 128;
pub const MRB_STATE_NO_REGEXP: u32 = 1;
pub const MRB_STATE_REGEXP: u32 = 2;
pub const MRB_PARSER_TOKBUF_MAX: u32 = 65536;
pub const MRB_PARSER_TOKBUF_SIZE: u32 = 256;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_off_t = __int64_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
/// MRuby Value definition functions and macros.
pub type mrb_sym = u32;
pub type mrb_bool = u8;
pub type mrb_int = i64;
extern "C" {
    #[link_name = "\u{1}_mrb_float_read"]
    pub fn mrb_float_read(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
pub type mrb_float = f64;
pub const mrb_vtype_MRB_TT_FALSE: mrb_vtype = 0;
pub const mrb_vtype_MRB_TT_FREE: mrb_vtype = 1;
pub const mrb_vtype_MRB_TT_TRUE: mrb_vtype = 2;
pub const mrb_vtype_MRB_TT_FIXNUM: mrb_vtype = 3;
pub const mrb_vtype_MRB_TT_SYMBOL: mrb_vtype = 4;
pub const mrb_vtype_MRB_TT_UNDEF: mrb_vtype = 5;
pub const mrb_vtype_MRB_TT_FLOAT: mrb_vtype = 6;
pub const mrb_vtype_MRB_TT_CPTR: mrb_vtype = 7;
pub const mrb_vtype_MRB_TT_OBJECT: mrb_vtype = 8;
pub const mrb_vtype_MRB_TT_CLASS: mrb_vtype = 9;
pub const mrb_vtype_MRB_TT_MODULE: mrb_vtype = 10;
pub const mrb_vtype_MRB_TT_ICLASS: mrb_vtype = 11;
pub const mrb_vtype_MRB_TT_SCLASS: mrb_vtype = 12;
pub const mrb_vtype_MRB_TT_PROC: mrb_vtype = 13;
pub const mrb_vtype_MRB_TT_ARRAY: mrb_vtype = 14;
pub const mrb_vtype_MRB_TT_HASH: mrb_vtype = 15;
pub const mrb_vtype_MRB_TT_STRING: mrb_vtype = 16;
pub const mrb_vtype_MRB_TT_RANGE: mrb_vtype = 17;
pub const mrb_vtype_MRB_TT_EXCEPTION: mrb_vtype = 18;
pub const mrb_vtype_MRB_TT_FILE: mrb_vtype = 19;
pub const mrb_vtype_MRB_TT_ENV: mrb_vtype = 20;
pub const mrb_vtype_MRB_TT_DATA: mrb_vtype = 21;
pub const mrb_vtype_MRB_TT_FIBER: mrb_vtype = 22;
pub const mrb_vtype_MRB_TT_ISTRUCT: mrb_vtype = 23;
pub const mrb_vtype_MRB_TT_BREAK: mrb_vtype = 24;
pub const mrb_vtype_MRB_TT_MAXDEFINE: mrb_vtype = 25;
pub type mrb_vtype = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBasic {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
}
#[test]
fn bindgen_test_layout_RBasic() {
    assert_eq!(
        ::std::mem::size_of::<RBasic>(),
        24usize,
        concat!("Size of: ", stringify!(RBasic))
    );
    assert_eq!(
        ::std::mem::align_of::<RBasic>(),
        8usize,
        concat!("Alignment of ", stringify!(RBasic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RBasic), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBasic),
            "::",
            stringify!(gcnext)
        )
    );
}
impl RBasic {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RObject {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
}
#[test]
fn bindgen_test_layout_RObject() {
    assert_eq!(
        ::std::mem::size_of::<RObject>(),
        32usize,
        concat!("Size of: ", stringify!(RObject))
    );
    assert_eq!(
        ::std::mem::align_of::<RObject>(),
        8usize,
        concat!("Alignment of ", stringify!(RObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(iv)
        )
    );
}
impl RObject {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RFiber {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub cxt: *mut mrb_context,
}
#[test]
fn bindgen_test_layout_RFiber() {
    assert_eq!(
        ::std::mem::size_of::<RFiber>(),
        32usize,
        concat!("Size of: ", stringify!(RFiber))
    );
    assert_eq!(
        ::std::mem::align_of::<RFiber>(),
        8usize,
        concat!("Alignment of ", stringify!(RFiber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RFiber), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).cxt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(cxt)
        )
    );
}
impl RFiber {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_value {
    pub value: mrb_value__bindgen_ty_1,
    pub tt: mrb_vtype,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_value__bindgen_ty_1 {
    pub f: mrb_float,
    pub p: *mut ::std::os::raw::c_void,
    pub i: mrb_int,
    pub sym: mrb_sym,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_mrb_value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(sym)
        )
    );
}
#[test]
fn bindgen_test_layout_mrb_value() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_value))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value>())).tt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value),
            "::",
            stringify!(tt)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_regexp_p"]
    pub fn mrb_regexp_p(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_bool;
}
pub type mrb_each_object_callback = ::std::option::Option<
    unsafe extern "C" fn(mrb: *mut mrb_state, obj: *mut RBasic, data: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_mrb_objspace_each_objects"]
    pub fn mrb_objspace_each_objects(
        mrb: *mut mrb_state,
        callback: mrb_each_object_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_free_context"]
    pub fn mrb_free_context(mrb: *mut mrb_state, c: *mut mrb_context);
}
pub const mrb_gc_state_MRB_GC_STATE_ROOT: mrb_gc_state = 0;
pub const mrb_gc_state_MRB_GC_STATE_MARK: mrb_gc_state = 1;
pub const mrb_gc_state_MRB_GC_STATE_SWEEP: mrb_gc_state = 2;
pub type mrb_gc_state = u32;
#[repr(C)]
#[derive(Debug)]
pub struct mrb_heap_page {
    pub freelist: *mut RBasic,
    pub prev: *mut mrb_heap_page,
    pub next: *mut mrb_heap_page,
    pub free_next: *mut mrb_heap_page,
    pub free_prev: *mut mrb_heap_page,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub objects: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_mrb_heap_page() {
    assert_eq!(
        ::std::mem::size_of::<mrb_heap_page>(),
        48usize,
        concat!("Size of: ", stringify!(mrb_heap_page))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_heap_page>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_heap_page))
    );
}
impl mrb_heap_page {
    #[inline]
    pub fn old(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_old(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(old: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let old: u8 = unsafe { ::std::mem::transmute(old) };
            old as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_gc {
    pub heaps: *mut mrb_heap_page,
    pub sweeps: *mut mrb_heap_page,
    pub free_heaps: *mut mrb_heap_page,
    pub live: usize,
    pub arena: *mut *mut RBasic,
    pub arena_capa: ::std::os::raw::c_int,
    pub arena_idx: ::std::os::raw::c_int,
    pub state: mrb_gc_state,
    pub current_white_part: ::std::os::raw::c_int,
    pub gray_list: *mut RBasic,
    pub atomic_gray_list: *mut RBasic,
    pub live_after_mark: usize,
    pub threshold: usize,
    pub interval_ratio: ::std::os::raw::c_int,
    pub step_ratio: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub majorgc_old_threshold: usize,
}
#[test]
fn bindgen_test_layout_mrb_gc() {
    assert_eq!(
        ::std::mem::size_of::<mrb_gc>(),
        112usize,
        concat!("Size of: ", stringify!(mrb_gc))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_gc>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_gc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).heaps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).sweeps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(sweeps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).free_heaps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(free_heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_capa as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_idx as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).state as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).current_white_part as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(current_white_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).gray_list as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).atomic_gray_list as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(atomic_gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live_after_mark as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live_after_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).threshold as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).interval_ratio as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(interval_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).step_ratio as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(step_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).majorgc_old_threshold as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(majorgc_old_threshold)
        )
    );
}
impl mrb_gc {
    #[inline]
    pub fn iterating(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iterating(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disabled(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disabled(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn full(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_full(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn generational(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_generational(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_of_memory(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_of_memory(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iterating: mrb_bool,
        disabled: mrb_bool,
        full: mrb_bool,
        generational: mrb_bool,
        out_of_memory: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iterating: u8 = unsafe { ::std::mem::transmute(iterating) };
            iterating as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disabled: u8 = unsafe { ::std::mem::transmute(disabled) };
            disabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let full: u8 = unsafe { ::std::mem::transmute(full) };
            full as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let generational: u8 = unsafe { ::std::mem::transmute(generational) };
            generational as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let out_of_memory: u8 = unsafe { ::std::mem::transmute(out_of_memory) };
            out_of_memory as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_object_dead_p"]
    pub fn mrb_object_dead_p(mrb: *mut mrb_state, object: *mut RBasic) -> mrb_bool;
}
/// MRuby C API entry point
pub type mrb_code = u32;
/// Required arguments signature type.
pub type mrb_aspec = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_irep {
    _unused: [u8; 0],
}
/// Function pointer type of custom allocator used in @see mrb_open_allocf.
///
/// The function pointing it must behave similarly as realloc except:
/// - If ptr is NULL it must allocate new space.
/// - If s is NULL, ptr must be freed.
///
/// See @see mrb_default_allocf for the default implementation.
pub type mrb_allocf = ::std::option::Option<
    unsafe extern "C" fn(
        mrb: *mut mrb_state,
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        ud: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_callinfo {
    pub mid: mrb_sym,
    pub proc_: *mut RProc,
    pub stackent: *mut mrb_value,
    pub nregs: ::std::os::raw::c_int,
    pub ridx: ::std::os::raw::c_int,
    pub epos: ::std::os::raw::c_int,
    pub env: *mut REnv,
    pub pc: *mut mrb_code,
    pub err: *mut mrb_code,
    pub argc: ::std::os::raw::c_int,
    pub acc: ::std::os::raw::c_int,
    pub target_class: *mut RClass,
}
#[test]
fn bindgen_test_layout_mrb_callinfo() {
    assert_eq!(
        ::std::mem::size_of::<mrb_callinfo>(),
        80usize,
        concat!("Size of: ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_callinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).mid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).proc_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).stackent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(stackent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).nregs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(nregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).ridx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(ridx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).epos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(epos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).env as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).pc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).err as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).argc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).acc as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).target_class as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(target_class)
        )
    );
}
pub const mrb_fiber_state_MRB_FIBER_CREATED: mrb_fiber_state = 0;
pub const mrb_fiber_state_MRB_FIBER_RUNNING: mrb_fiber_state = 1;
pub const mrb_fiber_state_MRB_FIBER_RESUMED: mrb_fiber_state = 2;
pub const mrb_fiber_state_MRB_FIBER_SUSPENDED: mrb_fiber_state = 3;
pub const mrb_fiber_state_MRB_FIBER_TRANSFERRED: mrb_fiber_state = 4;
pub const mrb_fiber_state_MRB_FIBER_TERMINATED: mrb_fiber_state = 5;
pub type mrb_fiber_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_context {
    pub prev: *mut mrb_context,
    pub stack: *mut mrb_value,
    pub stbase: *mut mrb_value,
    pub stend: *mut mrb_value,
    pub ci: *mut mrb_callinfo,
    pub cibase: *mut mrb_callinfo,
    pub ciend: *mut mrb_callinfo,
    pub rescue: *mut *mut mrb_code,
    pub rsize: ::std::os::raw::c_int,
    pub ensure: *mut *mut RProc,
    pub esize: ::std::os::raw::c_int,
    pub eidx: ::std::os::raw::c_int,
    pub status: mrb_fiber_state,
    pub vmexec: mrb_bool,
    pub fib: *mut RFiber,
}
#[test]
fn bindgen_test_layout_mrb_context() {
    assert_eq!(
        ::std::mem::size_of::<mrb_context>(),
        104usize,
        concat!("Size of: ", stringify!(mrb_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stbase as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ci as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).cibase as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(cibase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ciend as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ciend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).rescue as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(rescue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).rsize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(rsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ensure as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ensure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).esize as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(esize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).eidx as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(eidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).status as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).vmexec as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(vmexec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).fib as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(fib)
        )
    );
}
pub type mrb_func_t =
    ::std::option::Option<unsafe extern "C" fn(mrb: *mut mrb_state, arg1: mrb_value) -> mrb_value>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_method_t {
    pub func_p: mrb_bool,
    pub __bindgen_anon_1: mrb_method_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_method_t__bindgen_ty_1 {
    pub proc_: *mut RProc,
    pub func: mrb_func_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_mrb_method_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_method_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_method_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_method_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_method_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_method_t__bindgen_ty_1>())).proc_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_method_t__bindgen_ty_1),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_method_t__bindgen_ty_1>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_method_t__bindgen_ty_1),
            "::",
            stringify!(func)
        )
    );
}
#[test]
fn bindgen_test_layout_mrb_method_t() {
    assert_eq!(
        ::std::mem::size_of::<mrb_method_t>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_method_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_method_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_method_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_method_t>())).func_p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_method_t),
            "::",
            stringify!(func_p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_jmpbuf {
    _unused: [u8; 0],
}
pub type mrb_atexit_func = ::std::option::Option<unsafe extern "C" fn(arg1: *mut mrb_state)>;
/// Uncommon memory management stuffs.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_state {
    pub jmp: *mut mrb_jmpbuf,
    pub flags: u32,
    pub allocf: mrb_allocf,
    pub allocf_ud: *mut ::std::os::raw::c_void,
    pub c: *mut mrb_context,
    pub root_c: *mut mrb_context,
    pub globals: *mut iv_tbl,
    pub exc: *mut RObject,
    pub top_self: *mut RObject,
    pub object_class: *mut RClass,
    pub class_class: *mut RClass,
    pub module_class: *mut RClass,
    pub proc_class: *mut RClass,
    pub string_class: *mut RClass,
    pub array_class: *mut RClass,
    pub hash_class: *mut RClass,
    pub range_class: *mut RClass,
    pub float_class: *mut RClass,
    pub fixnum_class: *mut RClass,
    pub true_class: *mut RClass,
    pub false_class: *mut RClass,
    pub nil_class: *mut RClass,
    pub symbol_class: *mut RClass,
    pub kernel_module: *mut RClass,
    pub mems: *mut alloca_header,
    pub gc: mrb_gc,
    pub symidx: mrb_sym,
    pub name2sym: *mut kh_n2s,
    pub symtbl: *mut symbol_name,
    pub symcapa: usize,
    pub eException_class: *mut RClass,
    pub eStandardError_class: *mut RClass,
    pub nomem_err: *mut RObject,
    pub stack_err: *mut RObject,
    pub ud: *mut ::std::os::raw::c_void,
    pub atexit_stack: *mut mrb_atexit_func,
    pub atexit_stack_len: mrb_int,
}
#[test]
fn bindgen_test_layout_mrb_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_state>(),
        400usize,
        concat!("Size of: ", stringify!(mrb_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).jmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf_ud as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf_ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).c as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).root_c as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(root_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).globals as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).exc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(exc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).top_self as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(top_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).object_class as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(object_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).class_class as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(class_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).module_class as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(module_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).proc_class as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(proc_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).string_class as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(string_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).array_class as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(array_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).hash_class as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(hash_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).range_class as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(range_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).float_class as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(float_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).fixnum_class as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(fixnum_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).true_class as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(true_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).false_class as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(false_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nil_class as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nil_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symbol_class as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symbol_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).kernel_module as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(kernel_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).mems as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(mems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).gc as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symidx as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).name2sym as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(name2sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symtbl as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symtbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symcapa as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symcapa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eException_class as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eException_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eStandardError_class as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eStandardError_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nomem_err as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nomem_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).stack_err as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(stack_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).ud as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack_len as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack_len)
        )
    );
}
extern "C" {
    /// Defines a new class.
    ///
    /// If you're creating a gem it may look something like this:
    ///
    /// !!!c
    /// void mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// example_class = mrb_define_class(mrb, "Example_Class", mrb->object_class);
    /// }
    ///
    /// void mrb_example_gem_final(mrb_state* mrb) {
    /// //free(TheAnimals);
    /// }
    ///
    /// @param [mrb_state *] mrb The current mruby state.
    /// @param [const char *] name The name of the defined class.
    /// @param [struct RClass *] super The new class parent.
    /// @return [struct RClass *] Reference to the newly defined class.
    /// @see mrb_define_class_under
    #[link_name = "\u{1}_mrb_define_class"]
    pub fn mrb_define_class(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    /// Defines a new module.
    ///
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [const char *] char* The name of the module.
    /// @return [struct RClass *] Reference to the newly defined module.
    #[link_name = "\u{1}_mrb_define_module"]
    pub fn mrb_define_module(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_singleton_class"]
    pub fn mrb_singleton_class(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    /// Include a module in another class or module.
    /// Equivalent to:
    ///
    /// module B
    /// include A
    /// end
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [struct RClass *] RClass* A reference to module or a class.
    /// @param [struct RClass *] RClass* A reference to the module to be included.
    #[link_name = "\u{1}_mrb_include_module"]
    pub fn mrb_include_module(arg1: *mut mrb_state, arg2: *mut RClass, arg3: *mut RClass);
}
extern "C" {
    /// Prepends a module in another class or module.
    ///
    /// Equivalent to:
    /// module B
    /// prepend A
    /// end
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [struct RClass *] RClass* A reference to module or a class.
    /// @param [struct RClass *] RClass* A reference to the module to be prepended.
    #[link_name = "\u{1}_mrb_prepend_module"]
    pub fn mrb_prepend_module(arg1: *mut mrb_state, arg2: *mut RClass, arg3: *mut RClass);
}
extern "C" {
    /// Defines a global function in ruby.
    ///
    /// If you're creating a gem it may look something like this
    ///
    /// Example:
    ///
    /// !!!c
    /// mrb_value example_method(mrb_state* mrb, mrb_value self)
    /// {
    /// puts("Executing example command!");
    /// return self;
    /// }
    ///
    /// void mrb_example_gem_init(mrb_state* mrb)
    /// {
    /// mrb_define_method(mrb, mrb->kernel_module, "example_method", example_method, MRB_ARGS_NONE());
    /// }
    ///
    /// @param [mrb_state *] mrb The MRuby state reference.
    /// @param [struct RClass *] cla The class pointer where the method will be defined.
    /// @param [const char *] name The name of the method being defined.
    /// @param [mrb_func_t] func The function pointer to the method definition.
    /// @param [mrb_aspec] aspec The method parameters declaration.
    #[link_name = "\u{1}_mrb_define_method"]
    pub fn mrb_define_method(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
        func: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    /// Defines a class method.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// class Foo
    /// def Foo.bar
    /// end
    /// end
    /// // C style
    /// mrb_value bar_method(mrb_state* mrb, mrb_value self){
    /// return mrb_nil_value();
    /// }
    /// void mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *foo;
    /// foo = mrb_define_class(mrb, "Foo", mrb->object_class);
    /// mrb_define_class_method(mrb, foo, "bar", bar_method, MRB_ARGS_NONE());
    /// }
    /// @param [mrb_state *] mrb_state* The MRuby state reference.
    /// @param [struct RClass *] RClass* The class where the class method will be defined.
    /// @param [const char *] char* The name of the class method being defined.
    /// @param [mrb_func_t] mrb_func_t The function pointer to the class method definition.
    /// @param [mrb_aspec] mrb_aspec The method parameters declaration.
    #[link_name = "\u{1}_mrb_define_class_method"]
    pub fn mrb_define_class_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_singleton_method"]
    pub fn mrb_define_singleton_method(
        arg1: *mut mrb_state,
        arg2: *mut RObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    /// Defines a module fuction.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// module Foo
    /// def Foo.bar
    /// end
    /// end
    /// // C style
    /// mrb_value bar_method(mrb_state* mrb, mrb_value self){
    /// return mrb_nil_value();
    /// }
    /// void mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *foo;
    /// foo = mrb_define_module(mrb, "Foo");
    /// mrb_define_module_function(mrb, foo, "bar", bar_method, MRB_ARGS_NONE());
    /// }
    /// @param [mrb_state *] mrb_state* The MRuby state reference.
    /// @param [struct RClass *] RClass* The module where the module function will be defined.
    /// @param [const char *] char* The name of the module function being defined.
    /// @param [mrb_func_t] mrb_func_t The function pointer to the module function definition.
    /// @param [mrb_aspec] mrb_aspec The method parameters declaration.
    #[link_name = "\u{1}_mrb_define_module_function"]
    pub fn mrb_define_module_function(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    /// Defines a constant.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// class ExampleClass
    /// AGE = 22
    /// end
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb){
    /// mrb_define_const(mrb, mrb->kernel_module, "AGE", mrb_fixnum_value(22));
    /// }
    ///
    /// mrb_value
    /// mrb_example_gem_final(mrb_state* mrb){
    /// }
    /// @param [mrb_state *] mrb_state* The MRuby state reference.
    /// @param [struct RClass *] RClass* A class or module the constant is defined in.
    /// @param [const char *] name The name of the constant being defined.
    /// @param [mrb_value] mrb_value The value for the constant.
    #[link_name = "\u{1}_mrb_define_const"]
    pub fn mrb_define_const(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        name: *const ::std::os::raw::c_char,
        arg3: mrb_value,
    );
}
extern "C" {
    /// Undefines a method.
    ///
    /// Example:
    ///
    /// # Ruby style
    ///
    /// class ExampleClassA
    /// def example_method
    /// "example"
    /// end
    /// end
    /// ExampleClassA.new.example_method # => example
    ///
    /// class ExampleClassB < ExampleClassA
    /// undef_method :example_method
    /// end
    ///
    /// ExampleClassB.new.example_method # => undefined method 'example_method' for ExampleClassB (NoMethodError)
    ///
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// mrb_value
    /// mrb_example_method(mrb_state *mrb){
    /// return mrb_str_new_lit(mrb, "example");
    /// }
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *example_class_a;
    /// struct RClass *example_class_b;
    /// struct RClass *example_class_c;
    ///
    /// example_class_a = mrb_define_class(mrb, "ExampleClassA", mrb->object_class);
    /// mrb_define_method(mrb, example_class_a, "example_method", mrb_example_method, MRB_ARGS_NONE());
    /// example_class_b = mrb_define_class(mrb, "ExampleClassB", example_class_a);
    /// example_class_c = mrb_define_class(mrb, "ExampleClassC", example_class_b);
    /// mrb_undef_method(mrb, example_class_c, "example_method");
    /// }
    ///
    /// mrb_example_gem_final(mrb_state* mrb){
    /// }
    /// @param [mrb_state*] mrb_state* The mruby state reference.
    /// @param [struct RClass*] RClass* A class the method will be undefined from.
    /// @param [const char*] constchar* The name of the method to be undefined.
    #[link_name = "\u{1}_mrb_undef_method"]
    pub fn mrb_undef_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// Undefine a class method.
    /// Example:
    ///
    /// # Ruby style
    /// class ExampleClass
    /// def self.example_method
    /// "example"
    /// end
    /// end
    ///
    /// ExampleClass.example_method
    ///
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// mrb_value
    /// mrb_example_method(mrb_state *mrb){
    /// return mrb_str_new_lit(mrb, "example");
    /// }
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *example_class;
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    /// mrb_define_class_method(mrb, example_class, "example_method", mrb_example_method, MRB_ARGS_NONE());
    /// mrb_undef_class_method(mrb, example_class, "example_method");
    /// }
    ///
    /// void
    /// mrb_example_gem_final(mrb_state* mrb){
    /// }
    /// @param [mrb_state*] mrb_state* The mruby state reference.
    /// @param [RClass*] RClass* A class the class method will be undefined from.
    /// @param [constchar*] constchar* The name of the class method to be undefined.
    #[link_name = "\u{1}_mrb_undef_class_method"]
    pub fn mrb_undef_class_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// Initialize a new object instace of c class.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// class ExampleClass
    /// end
    ///
    /// p ExampleClass # => #<ExampleClass:0x9958588>
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// mrb_value obj;
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class); # => class ExampleClass; end
    /// obj = mrb_obj_new(mrb, example_class, 0, NULL); # => ExampleClass.new
    /// mrb_p(mrb, obj); // => Kernel#p
    /// }
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [RClass*] c Reference to the class of the new object.
    /// @param [mrb_int] argc Number of arguments in argv
    /// @param [const mrb_value *] argv Array of mrb_value to initialize the object
    /// @return [mrb_value] The newly initialized object
    #[link_name = "\u{1}_mrb_obj_new"]
    pub fn mrb_obj_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_instance_new"]
    pub fn mrb_instance_new(mrb: *mut mrb_state, cv: mrb_value) -> mrb_value;
}
extern "C" {
    /// Creates a new instance of Class, Class.
    ///
    /// Example:
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    ///
    /// mrb_value obj;
    /// example_class = mrb_class_new(mrb, mrb->object_class);
    /// obj = mrb_obj_new(mrb, example_class, 0, NULL); // => #<#<Class:0x9a945b8>:0x9a94588>
    /// mrb_p(mrb, obj); // => Kernel#p
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] super The super class or parent.
    /// @return [struct RClass *] Reference to the new class.
    #[link_name = "\u{1}_mrb_class_new"]
    pub fn mrb_class_new(mrb: *mut mrb_state, super_: *mut RClass) -> *mut RClass;
}
extern "C" {
    /// Creates a new module, Module.
    ///
    /// Example:
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_module;
    ///
    /// example_module = mrb_module_new(mrb);
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @return [struct RClass *] Reference to the new module.
    #[link_name = "\u{1}_mrb_module_new"]
    pub fn mrb_module_new(mrb: *mut mrb_state) -> *mut RClass;
}
extern "C" {
    /// Returns an mrb_bool. True if class was defined, and false if the class was not defined.
    ///
    /// Example:
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// mrb_bool cd;
    ///
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    /// cd = mrb_class_defined(mrb, "ExampleClass");
    ///
    /// // If mrb_class_defined returns 1 then puts "True"
    /// // If mrb_class_defined returns 0 then puts "False"
    /// if (cd == 1){
    /// puts("True");
    /// }
    /// else {
    /// puts("False");
    /// }
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name A string representing the name of the class.
    /// @return [mrb_bool] A boolean value.
    #[link_name = "\u{1}_mrb_class_defined"]
    pub fn mrb_class_defined(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> mrb_bool;
}
extern "C" {
    /// Gets a class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    #[link_name = "\u{1}_mrb_class_get"]
    pub fn mrb_class_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Gets a exception class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    #[link_name = "\u{1}_mrb_exc_get"]
    pub fn mrb_exc_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Returns an mrb_bool. True if inner class was defined, and false if the inner class was not defined.
    ///
    /// Example:
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_outer, *example_inner;
    /// mrb_bool cd;
    ///
    /// example_outer = mrb_define_module(mrb, "ExampleOuter");
    ///
    /// example_inner = mrb_define_class_under(mrb, example_outer, "ExampleInner", mrb->object_class);
    /// cd = mrb_class_defined_under(mrb, example_outer, "ExampleInner");
    ///
    /// // If mrb_class_defined_under returns 1 then puts "True"
    /// // If mrb_class_defined_under returns 0 then puts "False"
    /// if (cd == 1){
    /// puts("True");
    /// }
    /// else {
    /// puts("False");
    /// }
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the outer class.
    /// @param [const char *] name A string representing the name of the inner class.
    /// @return [mrb_bool] A boolean value.
    #[link_name = "\u{1}_mrb_class_defined_under"]
    pub fn mrb_class_defined_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> mrb_bool;
}
extern "C" {
    /// Gets a child class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the parent class.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    #[link_name = "\u{1}_mrb_class_get_under"]
    pub fn mrb_class_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    /// Gets a module.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the module.
    /// @return [struct RClass *] A reference to the module.
    #[link_name = "\u{1}_mrb_module_get"]
    pub fn mrb_module_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Gets a module defined under another module.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the outer module.
    /// @param [const char *] name The name of the module.
    /// @return [struct RClass *] A reference to the module.
    #[link_name = "\u{1}_mrb_module_get_under"]
    pub fn mrb_module_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_notimplement_m"]
    pub fn mrb_notimplement_m(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    /// Duplicate an object.
    ///
    /// Equivalent to:
    /// Object#dup
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [mrb_value] obj Object to be duplicate.
    /// @return [mrb_value] The newly duplicated object.
    #[link_name = "\u{1}_mrb_obj_dup"]
    pub fn mrb_obj_dup(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_to_integer"]
    pub fn mrb_check_to_integer(
        mrb: *mut mrb_state,
        val: mrb_value,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    /// Returns true if obj responds to the given method. If the method was defined for that
    /// class it returns true, it returns false otherwise.
    ///
    /// Example:
    /// # Ruby style
    /// class ExampleClass
    /// def example_method
    /// end
    /// end
    ///
    /// ExampleClass.new.respond_to?(:example_method) # => true
    ///
    /// // C style
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// mrb_sym mid;
    /// mrb_bool obj_resp;
    ///
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    /// mrb_define_method(mrb, example_class, "example_method", exampleMethod, MRB_ARGS_NONE());
    /// mid = mrb_intern_str(mrb, mrb_str_new_lit(mrb, "example_method" ));
    /// obj_resp = mrb_obj_respond_to(mrb, example_class, mid); // => 1(true in Ruby world)
    ///
    /// // If mrb_obj_respond_to returns 1 then puts "True"
    /// // If mrb_obj_respond_to returns 0 then puts "False"
    /// if (obj_resp == 1) {
    /// puts("True");
    /// }
    /// else if (obj_resp == 0) {
    /// puts("False");
    /// }
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] c A reference to a class.
    /// @param [mrb_sym] mid A symbol referencing a method id.
    /// @return [mrb_bool] A boolean value.
    #[link_name = "\u{1}_mrb_obj_respond_to"]
    pub fn mrb_obj_respond_to(mrb: *mut mrb_state, c: *mut RClass, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    /// Defines a new class under a given module
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer Reference to the module under which the new class will be defined
    /// @param [const char *] name The name of the defined class
    /// @param [struct RClass *] super The new class parent
    /// @return [struct RClass *] Reference to the newly defined class
    /// @see mrb_define_class
    #[link_name = "\u{1}_mrb_define_class_under"]
    pub fn mrb_define_class_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_module_under"]
    pub fn mrb_define_module_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
/// Format specifiers for {mrb_get_args} function
///
/// Must be a C string composed of the following format specifiers:
///
/// | char | Ruby type      | C types           | Notes                                              |
/// |:----:|----------------|-------------------|----------------------------------------------------|
/// | `o`  | {Object}       | {mrb_value}       | Could be used to retrieve any type of argument     |
/// | `C`  | {Class}/{Module} | {mrb_value}     |                                                    |
/// | `S`  | {String}       | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `A`  | {Array}        | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `H`  | {Hash}         | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `s`  | {String}       | char *, {mrb_int} | Receive two arguments; `s!` gives (`NULL`,`0`) for `nil`       |
/// | `z`  | {String}       | char *            | `NULL` terminated string; `z!` gives `NULL` for `nil`           |
/// | `a`  | {Array}        | {mrb_value} *, {mrb_int} | Receive two arguments; `a!` gives (`NULL`,`0`) for `nil` |
/// | `f`  | {Float}        | {mrb_float}       |                                                    |
/// | `i`  | {Integer}      | {mrb_int}         |                                                    |
/// | `b`  | boolean        | {mrb_bool}        |                                                    |
/// | `n`  | {Symbol}       | {mrb_sym}         |                                                    |
/// | `&`  | block          | {mrb_value}       | &! raises exception if no block given.             |
/// | `*`  | rest arguments | {mrb_value} *, {mrb_int} | Receive the rest of arguments as an array; *! avoid copy of the stack.  |
/// | &vert; | optional     |                   | After this spec following specs would be optional. |
/// | `?`  | optional given | {mrb_bool}        | `TRUE` if preceding argument is given. Used to check optional argument is given. |
///
/// @see mrb_get_args
pub type mrb_args_format = *const ::std::os::raw::c_char;
extern "C" {
    /// Retrieve arguments from mrb_state.
    ///
    /// When applicable, implicit conversions (such as `to_str`, `to_ary`, `to_hash`) are
    /// applied to received arguments.
    /// Used inside a function of mrb_func_t type.
    ///
    /// @param mrb The current MRuby state.
    /// @param format [mrb_args_format] is a list of format specifiers
    /// @param ... The passing variadic arguments must be a pointer of retrieving type.
    /// @return the number of arguments retrieved.
    /// @see mrb_args_format
    #[link_name = "\u{1}_mrb_get_args"]
    pub fn mrb_get_args(mrb: *mut mrb_state, format: mrb_args_format, ...) -> mrb_int;
}
extern "C" {
    /// Retrieve number of arguments from mrb_state.
    ///
    /// Correctly handles *splat arguments.
    #[link_name = "\u{1}_mrb_get_argc"]
    pub fn mrb_get_argc(mrb: *mut mrb_state) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_get_argv"]
    pub fn mrb_get_argv(mrb: *mut mrb_state) -> *mut mrb_value;
}
extern "C" {
    /// Call existing ruby functions.
    ///
    /// #include <stdio.h>
    /// #include <mruby.h>
    /// #include "mruby/compile.h"
    ///
    /// int
    /// main()
    /// {
    /// mrb_int i = 99;
    /// mrb_state *mrb = mrb_open();
    ///
    /// if (!mrb) { }
    /// FILE *fp = fopen("test.rb","r");
    /// mrb_value obj = mrb_load_file(mrb,fp);
    /// mrb_funcall(mrb, obj, "method_name", 1, mrb_fixnum_value(i));
    /// fclose(fp);
    /// mrb_close(mrb);
    /// }
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [mrb_value] mrb_value A reference to an mruby value.
    /// @param [const char*] const char* The name of the method.
    /// @param [mrb_int] mrb_int The number of arguments the method has.
    /// @param [...] ... Variadic values(not type safe!).
    /// @return [mrb_value] mrb_value mruby function value.
    #[link_name = "\u{1}_mrb_funcall"]
    pub fn mrb_funcall(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_int,
        ...
    ) -> mrb_value;
}
extern "C" {
    /// Call existing ruby functions. This is basically the type safe version of mrb_funcall.
    ///
    /// #include <stdio.h>
    /// #include <mruby.h>
    /// #include "mruby/compile.h"
    /// int
    /// main()
    /// {
    /// mrb_int i = 99;
    /// mrb_state *mrb = mrb_open();
    ///
    /// if (!mrb) { }
    /// mrb_sym m_sym = mrb_intern_lit(mrb, "method_name"); // Symbol for method.
    ///
    /// FILE *fp = fopen("test.rb","r");
    /// mrb_value obj = mrb_load_file(mrb,fp);
    /// mrb_funcall_argv(mrb, obj, m_sym, 1, &obj); // Calling ruby function from test.rb.
    /// fclose(fp);
    /// mrb_close(mrb);
    /// }
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [mrb_value] mrb_value A reference to an mruby value.
    /// @param [mrb_sym] mrb_sym The symbol representing the method.
    /// @param [mrb_int] mrb_int The number of arguments the method has.
    /// @param [const mrb_value*] mrb_value* Pointer to the object.
    /// @return [mrb_value] mrb_value mruby function value.
    /// @see mrb_funcall
    #[link_name = "\u{1}_mrb_funcall_argv"]
    pub fn mrb_funcall_argv(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
        arg4: mrb_int,
        arg5: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Call existing ruby functions with a block.
    #[link_name = "\u{1}_mrb_funcall_with_block"]
    pub fn mrb_funcall_with_block(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
        arg4: mrb_int,
        arg5: *const mrb_value,
        arg6: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Create a symbol
    ///
    /// # Ruby style:
    /// :pizza # => :pizza
    ///
    /// // C style:
    /// mrb_sym m_sym = mrb_intern_lit(mrb, "pizza"); //  => :pizza
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [const char*] const char* The name of the method.
    /// @return [mrb_sym] mrb_sym A symbol.
    #[link_name = "\u{1}_mrb_intern_cstr"]
    pub fn mrb_intern_cstr(arg1: *mut mrb_state, arg2: *const ::std::os::raw::c_char) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_intern"]
    pub fn mrb_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_intern_static"]
    pub fn mrb_intern_static(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_intern_str"]
    pub fn mrb_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_intern_cstr"]
    pub fn mrb_check_intern_cstr(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_intern"]
    pub fn mrb_check_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_intern_str"]
    pub fn mrb_check_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_sym2name"]
    pub fn mrb_sym2name(arg1: *mut mrb_state, arg2: mrb_sym) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_sym2name_len"]
    pub fn mrb_sym2name_len(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: *mut mrb_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_sym2str"]
    pub fn mrb_sym2str(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_malloc"]
    pub fn mrb_malloc(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_calloc"]
    pub fn mrb_calloc(
        arg1: *mut mrb_state,
        arg2: usize,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_realloc"]
    pub fn mrb_realloc(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_realloc_simple"]
    pub fn mrb_realloc_simple(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_malloc_simple"]
    pub fn mrb_malloc_simple(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_alloc"]
    pub fn mrb_obj_alloc(arg1: *mut mrb_state, arg2: mrb_vtype, arg3: *mut RClass) -> *mut RBasic;
}
extern "C" {
    #[link_name = "\u{1}_mrb_free"]
    pub fn mrb_free(arg1: *mut mrb_state, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_new"]
    pub fn mrb_str_new(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    /// Turns a C string into a Ruby string value.
    #[link_name = "\u{1}_mrb_str_new_cstr"]
    pub fn mrb_str_new_cstr(arg1: *mut mrb_state, arg2: *const ::std::os::raw::c_char)
        -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_str_new_static"]
    pub fn mrb_str_new_static(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    /// Creates new mrb_state.
    ///
    /// @return
    /// Pointer to the newly created mrb_state.
    #[link_name = "\u{1}_mrb_open"]
    pub fn mrb_open() -> *mut mrb_state;
}
extern "C" {
    /// Create new mrb_state with custom allocators.
    ///
    /// @param f
    /// Reference to the allocation function.
    /// @param ud
    /// User data will be passed to custom allocator f.
    /// If user data isn't required just pass NULL.
    /// @return
    /// Pointer to the newly created mrb_state.
    #[link_name = "\u{1}_mrb_open_allocf"]
    pub fn mrb_open_allocf(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    /// Create new mrb_state with just the MRuby core
    ///
    /// @param f
    /// Reference to the allocation function.
    /// Use mrb_default_allocf for the default
    /// @param ud
    /// User data will be passed to custom allocator f.
    /// If user data isn't required just pass NULL.
    /// @return
    /// Pointer to the newly created mrb_state.
    #[link_name = "\u{1}_mrb_open_core"]
    pub fn mrb_open_core(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    /// Closes and frees a mrb_state.
    ///
    /// @param mrb
    /// Pointer to the mrb_state to be closed.
    #[link_name = "\u{1}_mrb_close"]
    pub fn mrb_close(mrb: *mut mrb_state);
}
extern "C" {
    /// The default allocation function.
    ///
    /// @see mrb_allocf
    #[link_name = "\u{1}_mrb_default_allocf"]
    pub fn mrb_default_allocf(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_top_self"]
    pub fn mrb_top_self(arg1: *mut mrb_state) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_run"]
    pub fn mrb_run(arg1: *mut mrb_state, arg2: *mut RProc, arg3: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_top_run"]
    pub fn mrb_top_run(
        arg1: *mut mrb_state,
        arg2: *mut RProc,
        arg3: mrb_value,
        arg4: ::std::os::raw::c_uint,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_run"]
    pub fn mrb_vm_run(
        arg1: *mut mrb_state,
        arg2: *mut RProc,
        arg3: mrb_value,
        arg4: ::std::os::raw::c_uint,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_vm_exec"]
    pub fn mrb_vm_exec(arg1: *mut mrb_state, arg2: *mut RProc, arg3: *mut mrb_code) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_p"]
    pub fn mrb_p(arg1: *mut mrb_state, arg2: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_id"]
    pub fn mrb_obj_id(obj: mrb_value) -> mrb_int;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_to_sym"]
    pub fn mrb_obj_to_sym(mrb: *mut mrb_state, name: mrb_value) -> mrb_sym;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_eq"]
    pub fn mrb_obj_eq(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_equal"]
    pub fn mrb_obj_equal(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_equal"]
    pub fn mrb_equal(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_convert_to_integer"]
    pub fn mrb_convert_to_integer(mrb: *mut mrb_state, val: mrb_value, base: mrb_int) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_Integer"]
    pub fn mrb_Integer(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_Float"]
    pub fn mrb_Float(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_inspect"]
    pub fn mrb_inspect(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_eql"]
    pub fn mrb_eql(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_garbage_collect"]
    pub fn mrb_garbage_collect(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_full_gc"]
    pub fn mrb_full_gc(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_incremental_gc"]
    pub fn mrb_incremental_gc(arg1: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_mark"]
    pub fn mrb_gc_mark(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    #[link_name = "\u{1}_mrb_field_write_barrier"]
    pub fn mrb_field_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic, arg3: *mut RBasic);
}
extern "C" {
    #[link_name = "\u{1}_mrb_write_barrier"]
    pub fn mrb_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_convert_type"]
    pub fn mrb_check_convert_type(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        tname: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_any_to_s"]
    pub fn mrb_any_to_s(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_classname"]
    pub fn mrb_obj_classname(mrb: *mut mrb_state, obj: mrb_value) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_class"]
    pub fn mrb_obj_class(mrb: *mut mrb_state, obj: mrb_value) -> *mut RClass;
}
extern "C" {
    #[link_name = "\u{1}_mrb_class_path"]
    pub fn mrb_class_path(mrb: *mut mrb_state, c: *mut RClass) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_convert_type"]
    pub fn mrb_convert_type(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        tname: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_is_kind_of"]
    pub fn mrb_obj_is_kind_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_inspect"]
    pub fn mrb_obj_inspect(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_clone"]
    pub fn mrb_obj_clone(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_exc_new"]
    pub fn mrb_exc_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        ptr: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_exc_raise"]
    pub fn mrb_exc_raise(mrb: *mut mrb_state, exc: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_raise"]
    pub fn mrb_raise(mrb: *mut mrb_state, c: *mut RClass, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_mrb_raisef"]
    pub fn mrb_raisef(mrb: *mut mrb_state, c: *mut RClass, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_mrb_name_error"]
    pub fn mrb_name_error(
        mrb: *mut mrb_state,
        id: mrb_sym,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_warn"]
    pub fn mrb_warn(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_mrb_bug"]
    pub fn mrb_bug(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_mrb_print_backtrace"]
    pub fn mrb_print_backtrace(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_print_error"]
    pub fn mrb_print_error(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield"]
    pub fn mrb_yield(mrb: *mut mrb_state, b: mrb_value, arg: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield_argv"]
    pub fn mrb_yield_argv(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield_with_class"]
    pub fn mrb_yield_with_class(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
        self_: mrb_value,
        c: *mut RClass,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_yield_cont"]
    pub fn mrb_yield_cont(
        mrb: *mut mrb_state,
        b: mrb_value,
        self_: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_protect"]
    pub fn mrb_gc_protect(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_register"]
    pub fn mrb_gc_register(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_gc_unregister"]
    pub fn mrb_gc_unregister(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    #[link_name = "\u{1}_mrb_to_int"]
    pub fn mrb_to_int(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_check_type"]
    pub fn mrb_check_type(mrb: *mut mrb_state, x: mrb_value, t: mrb_vtype);
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_alias"]
    pub fn mrb_define_alias(
        mrb: *mut mrb_state,
        klass: *mut RClass,
        name1: *const ::std::os::raw::c_char,
        name2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_class_name"]
    pub fn mrb_class_name(mrb: *mut mrb_state, klass: *mut RClass)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_define_global_const"]
    pub fn mrb_define_global_const(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        val: mrb_value,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_attr_get"]
    pub fn mrb_attr_get(mrb: *mut mrb_state, obj: mrb_value, id: mrb_sym) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_respond_to"]
    pub fn mrb_respond_to(mrb: *mut mrb_state, obj: mrb_value, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_obj_is_instance_of"]
    pub fn mrb_obj_is_instance_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_func_basic_p"]
    pub fn mrb_func_basic_p(
        mrb: *mut mrb_state,
        obj: mrb_value,
        mid: mrb_sym,
        func: mrb_func_t,
    ) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fiber_resume"]
    pub fn mrb_fiber_resume(
        mrb: *mut mrb_state,
        fib: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fiber_yield"]
    pub fn mrb_fiber_yield(mrb: *mut mrb_state, argc: mrb_int, argv: *const mrb_value)
        -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_fiber_alive_p"]
    pub fn mrb_fiber_alive_p(mrb: *mut mrb_state, fib: mrb_value) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_stack_extend"]
    pub fn mrb_stack_extend(arg1: *mut mrb_state, arg2: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_pool {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_open"]
    pub fn mrb_pool_open(arg1: *mut mrb_state) -> *mut mrb_pool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_close"]
    pub fn mrb_pool_close(arg1: *mut mrb_pool);
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_alloc"]
    pub fn mrb_pool_alloc(arg1: *mut mrb_pool, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_realloc"]
    pub fn mrb_pool_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        oldlen: usize,
        newlen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_pool_can_realloc"]
    pub fn mrb_pool_can_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> mrb_bool;
}
extern "C" {
    #[link_name = "\u{1}_mrb_alloca"]
    pub fn mrb_alloca(mrb: *mut mrb_state, arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mrb_state_atexit"]
    pub fn mrb_state_atexit(mrb: *mut mrb_state, func: mrb_atexit_func);
}
extern "C" {
    #[link_name = "\u{1}_mrb_show_version"]
    pub fn mrb_show_version(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_show_copyright"]
    pub fn mrb_show_copyright(mrb: *mut mrb_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_format"]
    pub fn mrb_format(mrb: *mut mrb_state, format: *const ::std::os::raw::c_char, ...)
        -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrbc_context {
    pub syms: *mut mrb_sym,
    pub slen: ::std::os::raw::c_int,
    pub filename: *mut ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_short,
    pub partial_hook: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
    >,
    pub partial_data: *mut ::std::os::raw::c_void,
    pub target_class: *mut RClass,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub parser_nerr: usize,
}
#[test]
fn bindgen_test_layout_mrbc_context() {
    assert_eq!(
        ::std::mem::size_of::<mrbc_context>(),
        72usize,
        concat!("Size of: ", stringify!(mrbc_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrbc_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrbc_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).syms as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).slen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_hook as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).target_class as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(target_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).parser_nerr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(parser_nerr)
        )
    );
}
impl mrbc_context {
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dump_result(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dump_result(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_exec(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_exec(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_lv(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_keep_lv(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        capture_errors: mrb_bool,
        dump_result: mrb_bool,
        no_exec: mrb_bool,
        keep_lv: mrb_bool,
        no_optimize: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dump_result: u8 = unsafe { ::std::mem::transmute(dump_result) };
            dump_result as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_exec: u8 = unsafe { ::std::mem::transmute(no_exec) };
            no_exec as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let keep_lv: u8 = unsafe { ::std::mem::transmute(keep_lv) };
            keep_lv as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrbc_context_new"]
    pub fn mrbc_context_new(mrb: *mut mrb_state) -> *mut mrbc_context;
}
extern "C" {
    #[link_name = "\u{1}_mrbc_context_free"]
    pub fn mrbc_context_free(mrb: *mut mrb_state, cxt: *mut mrbc_context);
}
extern "C" {
    #[link_name = "\u{1}_mrbc_filename"]
    pub fn mrbc_filename(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrbc_partial_hook"]
    pub fn mrbc_partial_hook(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        partial_hook: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_ast_node {
    pub car: *mut mrb_ast_node,
    pub cdr: *mut mrb_ast_node,
    pub lineno: u16,
    pub filename_index: u16,
}
#[test]
fn bindgen_test_layout_mrb_ast_node() {
    assert_eq!(
        ::std::mem::size_of::<mrb_ast_node>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_ast_node>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).car as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(car)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).cdr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(cdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).lineno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).filename_index as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(filename_index)
        )
    );
}
pub const mrb_lex_state_enum_EXPR_BEG: mrb_lex_state_enum = 0;
pub const mrb_lex_state_enum_EXPR_END: mrb_lex_state_enum = 1;
pub const mrb_lex_state_enum_EXPR_ENDARG: mrb_lex_state_enum = 2;
pub const mrb_lex_state_enum_EXPR_ENDFN: mrb_lex_state_enum = 3;
pub const mrb_lex_state_enum_EXPR_ARG: mrb_lex_state_enum = 4;
pub const mrb_lex_state_enum_EXPR_CMDARG: mrb_lex_state_enum = 5;
pub const mrb_lex_state_enum_EXPR_MID: mrb_lex_state_enum = 6;
pub const mrb_lex_state_enum_EXPR_FNAME: mrb_lex_state_enum = 7;
pub const mrb_lex_state_enum_EXPR_DOT: mrb_lex_state_enum = 8;
pub const mrb_lex_state_enum_EXPR_CLASS: mrb_lex_state_enum = 9;
pub const mrb_lex_state_enum_EXPR_VALUE: mrb_lex_state_enum = 10;
pub const mrb_lex_state_enum_EXPR_MAX_STATE: mrb_lex_state_enum = 11;
pub type mrb_lex_state_enum = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_message {
    pub lineno: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mrb_parser_message() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_message>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_message>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).lineno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).column as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(message)
        )
    );
}
pub const mrb_string_type_str_not_parsing: mrb_string_type = 0;
pub const mrb_string_type_str_squote: mrb_string_type = 1;
pub const mrb_string_type_str_dquote: mrb_string_type = 3;
pub const mrb_string_type_str_regexp: mrb_string_type = 7;
pub const mrb_string_type_str_sword: mrb_string_type = 41;
pub const mrb_string_type_str_dword: mrb_string_type = 43;
pub const mrb_string_type_str_ssym: mrb_string_type = 17;
pub const mrb_string_type_str_ssymbols: mrb_string_type = 49;
pub const mrb_string_type_str_dsymbols: mrb_string_type = 51;
pub const mrb_string_type_str_heredoc: mrb_string_type = 65;
pub const mrb_string_type_str_xquote: mrb_string_type = 131;
pub type mrb_string_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_heredoc_info {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub type_: mrb_string_type,
    pub term: *const ::std::os::raw::c_char,
    pub term_len: ::std::os::raw::c_int,
    pub doc: *mut mrb_ast_node,
}
#[test]
fn bindgen_test_layout_mrb_parser_heredoc_info() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_heredoc_info>(),
        32usize,
        concat!("Size of: ", stringify!(mrb_parser_heredoc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_heredoc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_heredoc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).term as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).term_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(term_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).doc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(doc)
        )
    );
}
impl mrb_parser_heredoc_info {
    #[inline]
    pub fn allow_indent(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allow_indent(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn line_head(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_line_head(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        allow_indent: mrb_bool,
        line_head: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let allow_indent: u8 = unsafe { ::std::mem::transmute(allow_indent) };
            allow_indent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let line_head: u8 = unsafe { ::std::mem::transmute(line_head) };
            line_head as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_parser_state {
    pub mrb: *mut mrb_state,
    pub pool: *mut mrb_pool,
    pub cells: *mut mrb_ast_node,
    pub s: *const ::std::os::raw::c_char,
    pub send: *const ::std::os::raw::c_char,
    pub f: *mut FILE,
    pub cxt: *mut mrbc_context,
    pub filename: *const ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
    pub lstate: mrb_lex_state_enum,
    pub lex_strterm: *mut mrb_ast_node,
    pub cond_stack: ::std::os::raw::c_uint,
    pub cmdarg_stack: ::std::os::raw::c_uint,
    pub paren_nest: ::std::os::raw::c_int,
    pub lpar_beg: ::std::os::raw::c_int,
    pub in_def: ::std::os::raw::c_int,
    pub in_single: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub locals: *mut mrb_ast_node,
    pub pb: *mut mrb_ast_node,
    pub tokbuf: *mut ::std::os::raw::c_char,
    pub buf: [::std::os::raw::c_char; 256usize],
    pub tidx: ::std::os::raw::c_int,
    pub tsiz: ::std::os::raw::c_int,
    pub all_heredocs: *mut mrb_ast_node,
    pub heredocs_from_nextline: *mut mrb_ast_node,
    pub parsing_heredoc: *mut mrb_ast_node,
    pub lex_strterm_before_heredoc: *mut mrb_ast_node,
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub ylval: *mut ::std::os::raw::c_void,
    pub nerr: usize,
    pub nwarn: usize,
    pub tree: *mut mrb_ast_node,
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub error_buffer: [mrb_parser_message; 10usize],
    pub warn_buffer: [mrb_parser_message; 10usize],
    pub filename_table: *mut mrb_sym,
    pub filename_table_length: usize,
    pub current_filename_index: ::std::os::raw::c_int,
    pub jmp: *mut mrb_jmpbuf,
}
#[test]
fn bindgen_test_layout_mrb_parser_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_state>(),
        840usize,
        concat!("Size of: ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).mrb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(mrb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cells as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).s as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).send as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).f as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cxt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lineno as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).column as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lstate as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cond_stack as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cond_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cmdarg_stack as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cmdarg_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).paren_nest as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(paren_nest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lpar_beg as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lpar_beg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_def as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_single as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_single)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).locals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(locals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pb as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tokbuf as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tokbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).buf as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tidx as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tsiz as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tsiz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).all_heredocs as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(all_heredocs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).heredocs_from_nextline as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(heredocs_from_nextline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).parsing_heredoc as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(parsing_heredoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm_before_heredoc as *const _
                as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm_before_heredoc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).ylval as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(ylval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nerr as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nerr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nwarn as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nwarn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tree as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).error_buffer as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(error_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).warn_buffer as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(warn_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename_table as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).filename_table_length as *const _ as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).current_filename_index as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(current_filename_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).jmp as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(jmp)
        )
    );
}
impl mrb_parser_state {
    #[inline]
    pub fn cmd_start(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cmd_start(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cmd_start: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cmd_start: u8 = unsafe { ::std::mem::transmute(cmd_start) };
            cmd_start as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn heredoc_end_now(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_heredoc_end_now(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(heredoc_end_now: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let heredoc_end_now: u8 = unsafe { ::std::mem::transmute(heredoc_end_now) };
            heredoc_end_now as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        no_optimize: mrb_bool,
        capture_errors: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_new"]
    pub fn mrb_parser_new(arg1: *mut mrb_state) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_free"]
    pub fn mrb_parser_free(arg1: *mut mrb_parser_state);
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_parse"]
    pub fn mrb_parser_parse(arg1: *mut mrb_parser_state, arg2: *mut mrbc_context);
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_set_filename"]
    pub fn mrb_parser_set_filename(
        arg1: *mut mrb_parser_state,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_mrb_parser_get_filename"]
    pub fn mrb_parser_get_filename(
        arg1: *mut mrb_parser_state,
        idx: u16,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parse_file"]
    pub fn mrb_parse_file(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parse_string"]
    pub fn mrb_parse_string(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_parse_nstring"]
    pub fn mrb_parse_nstring(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    #[link_name = "\u{1}_mrb_generate_code"]
    pub fn mrb_generate_code(arg1: *mut mrb_state, arg2: *mut mrb_parser_state) -> *mut RProc;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_exec"]
    pub fn mrb_load_exec(
        mrb: *mut mrb_state,
        p: *mut mrb_parser_state,
        c: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_file"]
    pub fn mrb_load_file(arg1: *mut mrb_state, arg2: *mut FILE) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_file_cxt"]
    pub fn mrb_load_file_cxt(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_string"]
    pub fn mrb_load_string(mrb: *mut mrb_state, s: *const ::std::os::raw::c_char) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_nstring"]
    pub fn mrb_load_nstring(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_string_cxt"]
    pub fn mrb_load_string_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}_mrb_load_nstring_cxt"]
    pub fn mrb_load_nstring_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RClass {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_tbl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RProc {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct REnv {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alloca_header {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kh_n2s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symbol_name {
    pub _address: u8,
}
